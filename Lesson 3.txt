Aggregations

QUIZ 1 SUM

1.Find the total amount of poster_qty paper ordered in the orders table.

 SELECT SUM (poster_qty) AS poster_ords
FROM orders;

2.Find the total amount of standard_qty paper ordered in the orders table.

SELECT SUM(standard_qty) AS standard_total
FROM orders;

3.Find the total dollar amount of sales using the total_amt_usd in the orders table.

SELECT SUM(total_amt_usd) AS total
FROM orders;

4.Find the total amount for each individual order that was spent on standard and gloss paper in the orders table. This should give a dollar amount for each order in the table.

SELECT standard_amt_usd + gloss_amt_usd AS total_standard_gloss
FROM orders;

5.Though the price/standard_qty paper varies from one order to the next. I would like this ratio across all of the sales made in the orders table.

SELECT SUM(standard_amt_usd)/SUM(standard_qty) AS standard_price_per_unit
FROM orders;

QUIZ 2 MIN, MAX, and AVG

1.When was the earliest order ever placed? You only need to return the date.

SELECT MIN(occurred_at) AS last_order
FROM orders;

2.Try performing the same query as in question 1 without using an aggregation function.

SELECT occurred_at
FROM orders
ORDER BY occurred_at ASC
LIMIT 1;

3.When did the most recent (latest) web_event occur?

SELECT MAX(occurred_at) AS recent_order
FROM web_events;

4.Try to perform the result of the previous query without using an aggregation function.

SELECT occurred_at
FROM web_events
ORDER BY occurred_at DESC
LIMIT 1;

5.Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean amount of each paper type purchased per order.

SELECT AVG(standard_qty) mean_standard, AVG(gloss_qty) mean_gloss, 
           AVG(poster_qty) mean_poster, AVG(standard_amt_usd) mean_standard_usd, 
           AVG(gloss_amt_usd) mean_gloss_usd, AVG(poster_amt_usd) mean_poster_usd
FROM orders;

6.what is the MEDIAN total_usd spent on all orders? 

SELECT *
FROM (SELECT total_amt_usd
      FROM orders
      ORDER BY total_amt_usd
      LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2;

QUIZ 3  GROUP BY

1.Which account (by name) placed the earliest order? Your solution should have the account name and the date of the order.

SELECT accounts.name, orders.occurred_at
FROM accounts, orders
WHERE accounts.id = orders.account_id
ORDER BY orders.occurred_at
LIMIT 1;

2.Find the total sales in usd for each account. You should include two columns - the total sales for each company's orders in usd and the company name.

SELECT accounts.name company_name,
SUM(orders.total_amt_usd) AS total_sales
FROM accounts, orders
WHERE accounts.id = orders.account_id
GROUP BY company_name;


3.Via what channel did the most recent (latest) web_event occur, which account was associated with this web_event? Your query should return only three values - the date, channel, and account name.

SELECT accounts.name, web_events.occurred_at, web_events.channel
FROM accounts, web_events
WHERE accounts.id = web_events.account_id
ORDER BY occurred_at
LIMIT 1;

4.nd the total number of times each type of channel from the web_events was used. Your final table should have two columns - the channel and the number of times the channel was used.

SELECT web_events.channel, COUNT(*)
FROM web_events
GROUP BY channel;

5.Who was the primary contact associated with the earliest web_event?

SELECT accounts.primary_poc, web_events.occurred_at
FROM accounts, web_events
WHERE accounts.id = web_events.account_id
ORDER BY occurred_at ASC
LIMIT 1;

6.What was the smallest order placed by each account in terms of total usd. Provide only two columns - the account name and the total usd. Order from smallest dollar amounts to largest

SELECT accounts.name,
MIN(orders.total_amt_usd) AS total_usd
FROM orders, accounts
WHERE accounts.id = orders.account_id
GROUP BY accounts.name
ORDER BY total_usd ASC;

7.Find the number of sales reps in each region. Your final table should have two columns - the region and the number of sales_reps. Order from fewest reps to most reps.

SELECT region.name,
COUNT(*) total_reps
FROM sales_reps, region
WHERE region.id = sales_reps.region_id
GROUP BY region.name
ORDER BY total_reps ASC;

QUIZ 4 GROUP BY II

1.For each account, determine the average amount of each type of paper they purchased across their orders. Your result should have four columns - one for the account name and one for the average quantity purchased for each of the paper types for each account.

SELECT accounts.name,
AVG(orders.standard_qty) AS avg_standard,
AVG(orders.poster_qty) AS avg_poster,
AVG(orders.gloss_qty) AS avg_gloss
FROM orders, accounts
WHERE orders.account_id = accounts.id
GROUP BY accounts.name;

2.For each account, determine the average amount spent per order on each paper type. Your result should have four columns - one for the account name and one for the average amount spent on each paper type.

SELECT accounts.name,
AVG(orders.standard_amt_usd) AS avg_standard,
AVG(orders.poster_amt_usd) AS avg_poster,
AVG(orders.gloss_amt_usd) AS avg_gloss
FROM orders, accounts
WHERE orders.account_id = accounts.id
GROUP BY accounts.name;

3.Determine the number of times a particular channel was used in the web_events table for each sales rep. Your final table should have three columns - the name of the sales rep, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

SELECT sales_reps.name, web_events.channel, COUNT (*) total_events
FROM accounts, web_events, sales_reps
WHERE accounts.id = web_events.account_id AND sales_reps.id = accounts.sales_rep_id
GROUP BY sales_reps.name, web_events.channel
ORDER BY total_events DESC;

4.Determine the number of times a particular channel was used in the web_events table for each region. Your final table should have three columns - the region name, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

SELECT region.name, web_events.channel, COUNT(*) channel_occs
FROM web_events, accounts, sales_reps, region
WHERE web_events.account_id = accounts.id AND sales_reps.id = accounts.sales_rep_id AND sales_reps.region_id = region.id
GROUP BY region.name, web_events.channel
ORDER BY channel_occs DESC;
