ORDER BY QUIZ

1. SELECT id, occurred_at, total_amt_usd
FROM orders
ORDER BY occurred_at
LIMIT 10;

2. SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC
LIMIT 5;

3. SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd
LIMIT 20;

ORDER BY QUIZ II

1. Write a query that displays the order ID, account ID, and total dollar amount for all the orders, sorted first by the account ID (in ascending order), and then by the total dollar amount (in descending order).
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY account_id, total_amt_usd DESC;

2. Now write a query that again displays order ID, account ID, and total dollar amount for each order, but this time sorted first by total dollar amount (in descending order), and then by account ID (in ascending order).
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC, account_id;

WHERE QUIZ
1.Pulls the first 5 rows and all columns from the orders table that have a dollar amount of gloss_amt_usd greater than or equal to 1000.
SELECT * 
FROM orders
WHERE gloss_amt_usd >= 100
LIMIT 5;

2.Pulls the first 10 rows and all columns from the orders table that have a total_amt_usd less than 500.
SELECT *
FROM orders
WHERE total_amt_usd <= 500
LIMIT 10;

WHERE with non-numeric values practice
1.SELECT name, website, primary_poc
FROM accounts
WHERE name = 'Exxon Mobil';

Arithmetic Operators
1. Create a column that divides the standard_amt_usd by the standard_qty to find the unit price for standard paper for each order. Limit the results to the first 10 orders, and include the id and account_id fields.
SELECT id,
account_id,
standard_amt_usd / standard_qty AS standard_paper_price
FROM orders
LIMIT 10;

2. 
(EASY WAY)
SELECT id,
account_id,
(poster_amt_usd / total_amt_usd) * 100
FROM orders;

(WITHOUT OUT USING total_amt_usd)
SELECT id,
account_id,
poster_amt_usd / (standard_amt_usd + gloss_amt_usd + poster_amt_usd) * 100 AS poster_percent_rev
FROM orders
LIMIT 10;

LIKE Operator
1.All the companies whose names start with 'C'.
SELECT name
FROM accounts
WHERE name LIKE 'C%';

2.All companies whose names contain the string 'one' somewhere in the name.
SELECT name
FROM accounts
WHERE name LIKE '%one%';

3.All companies whose names end with 's'.
SELECT name
FROM accounts
WHERE name LIKE '%s'

IN Operator
1.Use the accounts table to find the account name, primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom.
SELECT
name,
primary_poc,
sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom');

2.Use the web_events table to find all information regarding individuals who were contacted via the channel of organic or adwords.
SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords');

NOT Operator (same questions as LIKE & IN)
NOT IN
1. SELECT
name,
primary_poc,
sales_rep_id
FROM accounts
WHERE name NOT IN ('Walmart', 'Target', 'Nordstrom');

2. SELECT *
FROM web_events
WHERE channel NOT IN ('organic', 'adwords');

NOT LIKE
1. SELECT name
FROM accounts
WHERE name NOT LIKE ('C%');

2. SELECT name
FROM accounts
WHERE name NOT LIKE ('%one%');

3. SELECT name
FROM accounts
WHERE name NOT LIKE ('%s');

AND and BETWEEN Operator
1.Write a query that returns all the orders where the standard_qty is over 1000, the poster_qty is 0, and the gloss_qty is 0.
SELECT *
FROM orders
WHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0;

2.Using the accounts table, find all the companies whose names do not start with 'C' and end with 's'.
SELECT name
FROM accounts
WHERE name NOT LIKE 'C%' AND name NOT LIKE '%s';

3.
When you use the BETWEEN operator in SQL, do the results include the values of your endpoints, or not? Figure out the answer to this important question by writing a query that displays the order date and gloss_qty data for all orders where gloss_qty is between 24 and 29. Then look at your output to see if the BETWEEN operator included the begin and end values or not.
SELECT
occurred_at,
gloss_qty
FROM orders
WHERE gloss_qty BETWEEN 24 AND 29;
You should notice that there are a number of rows in the output of this query where the gloss_qty values are 24 or 29. 
So the answer to the question is that yes, the BETWEEN operator in SQL is inclusive; that is, the endpoint values are included. 
So the BETWEEN statement in this query is equivalent to having written "WHERE gloss_qty >= 24 AND gloss_qty <= 29."


4.You will notice that using BETWEEN is tricky for dates! While BETWEEN is generally inclusive of endpoints, it assumes the time is at 00:00:00 (i.e. midnight) for dates. This is the reason why we set the right-side endpoint of the period at '2017-01-01'.
SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01' AND '2016-12-31'
ORDER BY occurred_at DESC;